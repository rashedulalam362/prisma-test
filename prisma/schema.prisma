// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model products{
  id BigInt @id  @default(autoincrement()) @db.UnsignedBigInt
  product_id BigInt @db.UnsignedBigInt
  name String @db.VarChar(50)
  price String @db.VarChar(50)
  img_url String @db.VarChar(50)
  createAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  categories categories[]
  invoice_product invoice_product[]
}

model categories{
id BigInt @id  @default(autoincrement()) @db.UnsignedBigInt
name String @db.VarChar(50)
user_id BigInt @db.UnsignedBigInt
createdAt DateTime @default(now()) @db.Timestamp(0)
updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
products products @relation(fields: [user_id],references: [id],onDelete: Restrict,onUpdate: Cascade)
// users users @relation(fields: [category_id],references: [id],onDelete: Restrict,onUpdate: Cascade)
users users[]

}

 

model users {
  id BigInt @id  @default(autoincrement()) @db.UnsignedBigInt
  user_id BigInt @db.UnsignedBigInt
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  email String @unique
  mobile String @db.VarChar(50)
  Password String @db.VarChar(50)
  otp String @db.VarChar(50)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  categories categories @relation(fields: [user_id],references: [id],onDelete: Restrict,onUpdate: Cascade)
  customers customers[]
  invoices invoices[]
  invoice_product invoice_product[]
  }

 model customers{
     id BigInt @id  @default(autoincrement()) @db.UnsignedBigInt
      name String @db.VarChar(50)
      eamil String @db.VarChar(50)
      mobile String @db.VarChar(50)
      
      createdAt DateTime @default(now()) @db.Timestamp(0)
      updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0) 
      // users users @relation(fields: [user_id],references: [id],onDelete: Restrict,onUpdate: Cascade)
      users users @relation(fields: [user_id],references: [id],onDelete: Restrict,onUpdate: Cascade)
      user_id BigInt
     invoices invoices[]
 }
  
  model invoices{
     id BigInt @id  @default(autoincrement()) @db.UnsignedBigInt
     total String @db.VarChar(50)
     vat String @db.VarChar(50)
     payable String @db.VarChar(50)
     user_id BigInt
    users users @relation(fields: [user_id],references: [id],onDelete: Restrict,onUpdate: Cascade)
    customer_id BigInt @db.UnsignedBigInt
    customers customers @relation(fields: [customer_id],references: [id],onDelete: Restrict,onUpdate: Cascade)

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
    invoice_product invoice_product[]
  }


  model invoice_product{
    id BigInt @id  @default(autoincrement()) @db.UnsignedBigInt
    invoice_id BigInt
    invoices invoices @relation(fields: [invoice_id],references: [id],onDelete: Restrict,onUpdate: Cascade)
    product_id BigInt 
    products products @relation(fields: [product_id],references: [id],onDelete: Restrict,onUpdate: Cascade)
    user_id BigInt
    users users @relation(fields: [user_id],references: [id],onDelete: Restrict,onUpdate: Cascade)
    qty String  @db.VarChar(50)
    sale_price String @db.VarChar(50)
    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  }